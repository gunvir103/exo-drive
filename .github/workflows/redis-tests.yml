name: 🚀 Redis Testing & Cache Validation

on:
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 2 * * 1,4'  # Run twice weekly - Mondays and Thursdays at 2 AM
  push:
    branches:
      - main
      - develop
  pull_request:  # Also run on pull requests to catch issues before they're merged

jobs:
  redis-tests:
    name: 🔍 Redis Tests & Cache Validation
    runs-on: ubuntu-latest
    
    # Use repository secrets - these won't be accessible in PRs from forks
    env:
      KV_URL: ${{ secrets.KV_URL }}
      KV_REST_API_URL: ${{ secrets.KV_REST_API_URL }}
      KV_REST_API_TOKEN: ${{ secrets.KV_REST_API_TOKEN }}
      KV_REST_API_READ_ONLY_TOKEN: ${{ secrets.KV_REST_API_READ_ONLY_TOKEN }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Node.js and Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: 📦 Install dependencies
        run: |
          # Use Bun for faster package installation
          echo "Installing dependencies with Bun"
          bun install
          
      - name: 🛠️ Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: 🔑 Check Redis Credentials Availability
        id: check-creds
        run: |
          if [ -z "$KV_URL" ] || [ -z "$KV_REST_API_URL" ] || [ -z "$KV_REST_API_TOKEN" ]; then
            echo "has_credentials=false" >> $GITHUB_OUTPUT
            echo "::notice title=Limited Testing::Running with limited Redis testing because credentials are not available in this context."
          else
            echo "has_credentials=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 🧪 Run Redis Client Tests
        id: redis-client-tests
        run: |
          # Create reports directory
          mkdir -p reports
          
          echo "Running Redis client tests..."
          
          # Run Redis client tests with detailed output
          if bun test ./lib/redis/redis-client.test.ts --reporter json > reports/redis-client-test-results.json 2>&1; then
            echo "redis_client_status=success" >> $GITHUB_OUTPUT
            echo "::notice title=Redis Client Tests Passed::All Redis client tests have passed ✅"
          else
            EXIT_CODE=$?
            echo "redis_client_status=failure" >> $GITHUB_OUTPUT
            echo "::error title=Redis Client Tests Failed::Redis client tests failed with exit code $EXIT_CODE ❌"
            
            # Save failed test output for analysis
            echo '{"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"FAILED","test_type":"redis_client","exit_code":'$EXIT_CODE'}' > reports/redis-client-failure.json
          fi
      
      - name: 🗄️ Run Cache Service Tests
        id: cache-service-tests
        run: |
          echo "Running Cache service tests..."
          
          # Run Cache service tests with detailed output
          if bun test ./lib/redis/cache-service.test.ts --reporter json > reports/cache-service-test-results.json 2>&1; then
            echo "cache_service_status=success" >> $GITHUB_OUTPUT
            echo "::notice title=Cache Service Tests Passed::All cache service tests have passed ✅"
          else
            EXIT_CODE=$?
            echo "cache_service_status=failure" >> $GITHUB_OUTPUT
            echo "::error title=Cache Service Tests Failed::Cache service tests failed with exit code $EXIT_CODE ❌"
            
            # Save failed test output for analysis
            echo '{"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"FAILED","test_type":"cache_service","exit_code":'$EXIT_CODE'}' > reports/cache-service-failure.json
          fi
      
      - name: 🔥 Test Cache Warming Script
        id: cache-warming-test
        run: |
          echo "Testing cache warming script..."
          
          # Test cache warming script with minimal parameters
          if timeout 60s bun run scripts/warm-cache.ts --popular-only --limit 1 > reports/cache-warming-output.txt 2>&1; then
            echo "cache_warming_status=success" >> $GITHUB_OUTPUT
            echo "::notice title=Cache Warming Test Passed::Cache warming script executed successfully ✅"
          else
            EXIT_CODE=$?
            echo "cache_warming_status=failure" >> $GITHUB_OUTPUT
            
            if [ $EXIT_CODE -eq 124 ]; then
              echo "::warning title=Cache Warming Timeout::Cache warming script timed out after 60 seconds ⏰"
              echo "cache_warming_status=timeout" >> $GITHUB_OUTPUT
            elif [ "${{ steps.check-creds.outputs.has_credentials }}" == "false" ]; then
              echo "::notice title=Cache Warming Skipped::Cache warming test skipped due to missing Redis credentials ℹ️"
              echo "cache_warming_status=skipped" >> $GITHUB_OUTPUT
            else
              echo "::error title=Cache Warming Test Failed::Cache warming script failed with exit code $EXIT_CODE ❌"
            fi
            
            # Save output for analysis
            echo '{"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"FAILED","test_type":"cache_warming","exit_code":'$EXIT_CODE'}' > reports/cache-warming-failure.json
          fi
      
      - name: 📊 Generate Test Coverage Report
        id: coverage
        if: always()
        run: |
          echo "Generating test coverage report..."
          
          # Run tests with coverage (if credentials available)
          if [ "${{ steps.check-creds.outputs.has_credentials }}" == "true" ]; then
            bun test ./lib/redis/ --coverage --coverage-reporter json-summary > reports/coverage-summary.json 2>/dev/null || true
            bun test ./lib/redis/ --coverage --coverage-reporter text > reports/coverage-text.txt 2>/dev/null || true
          else
            echo "Skipping coverage report due to missing credentials"
            echo '{"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"SKIPPED","reason":"missing_credentials"}' > reports/coverage-summary.json
          fi
          
          # Always create a minimal coverage report for consistency
          if [ ! -f "reports/coverage-summary.json" ]; then
            echo '{"timestamp":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","status":"ERROR","coverage":{"lines":{"pct":0},"functions":{"pct":0},"branches":{"pct":0},"statements":{"pct":0}}}' > reports/coverage-summary.json
          fi
      
      - name: 📂 Debug directory contents
        if: always()
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Reports directory contents:"
          ls -la reports || echo "Reports directory not found"
          echo "Test result files:"
          find reports -name "*.json" -o -name "*.txt" | head -10
        
      - name: 📈 Parse Test Results and Generate Summary
        id: parse-results
        if: always()
        run: |
          # Initialize counters
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          COVERAGE_PCT=0
          
          # Parse Redis client test results
          if [ -f "reports/redis-client-test-results.json" ]; then
            CLIENT_TESTS=$(cat reports/redis-client-test-results.json | jq -r '.stats.tests // 0' 2>/dev/null || echo "0")
            CLIENT_PASSED=$(cat reports/redis-client-test-results.json | jq -r '.stats.passed // 0' 2>/dev/null || echo "0")
            CLIENT_FAILED=$(cat reports/redis-client-test-results.json | jq -r '.stats.failed // 0' 2>/dev/null || echo "0")
            
            TOTAL_TESTS=$((TOTAL_TESTS + CLIENT_TESTS))
            PASSED_TESTS=$((PASSED_TESTS + CLIENT_PASSED))
            FAILED_TESTS=$((FAILED_TESTS + CLIENT_FAILED))
          fi
          
          # Parse Cache service test results
          if [ -f "reports/cache-service-test-results.json" ]; then
            CACHE_TESTS=$(cat reports/cache-service-test-results.json | jq -r '.stats.tests // 0' 2>/dev/null || echo "0")
            CACHE_PASSED=$(cat reports/cache-service-test-results.json | jq -r '.stats.passed // 0' 2>/dev/null || echo "0")
            CACHE_FAILED=$(cat reports/cache-service-test-results.json | jq -r '.stats.failed // 0' 2>/dev/null || echo "0")
            
            TOTAL_TESTS=$((TOTAL_TESTS + CACHE_TESTS))
            PASSED_TESTS=$((PASSED_TESTS + CACHE_PASSED))
            FAILED_TESTS=$((FAILED_TESTS + CACHE_FAILED))
          fi
          
          # Parse coverage if available
          if [ -f "reports/coverage-summary.json" ]; then
            COVERAGE_PCT=$(cat reports/coverage-summary.json | jq -r '.total.lines.pct // 0' 2>/dev/null || echo "0")
          fi
          
          # Set output variables
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "coverage_pct=$COVERAGE_PCT" >> $GITHUB_OUTPUT
          
          # Determine overall status
          OVERALL_STATUS="SUCCESS"
          if [ "${{ steps.redis-client-tests.outputs.redis_client_status }}" = "failure" ] || [ "${{ steps.cache-service-tests.outputs.cache_service_status }}" = "failure" ]; then
            OVERALL_STATUS="FAILED"
          elif [ "${{ steps.check-creds.outputs.has_credentials }}" = "false" ]; then
            OVERALL_STATUS="LIMITED"
          elif [ "${{ steps.cache-warming-test.outputs.cache_warming_status }}" = "failure" ]; then
            OVERALL_STATUS="WARNING"
          fi
          
          echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          
          # Create comprehensive job summary
          echo "## 🚀 Redis Testing Results" >> $GITHUB_STEP_SUMMARY
          
          # Status with appropriate emoji
          case "$OVERALL_STATUS" in
            "SUCCESS")
              echo "**Status:** ✅ ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
              ;;
            "WARNING")
              echo "**Status:** ⚠️ TESTS PASSED WITH WARNINGS" >> $GITHUB_STEP_SUMMARY
              ;;
            "LIMITED")
              echo "**Status:** ℹ️ LIMITED TESTING (Credentials not available)" >> $GITHUB_STEP_SUMMARY
              echo "**Note:** Full Redis testing requires repository secrets to be configured." >> $GITHUB_STEP_SUMMARY
              ;;
            "FAILED")
              echo "**Status:** ❌ TESTS FAILED" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Test summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "**Passed:** ✅ $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "**Failed:** ❌ $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          
          if [ "$COVERAGE_PCT" != "0" ]; then
            echo "**Coverage:** 📈 ${COVERAGE_PCT}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Individual test results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Detailed Results" >> $GITHUB_STEP_SUMMARY
          
          # Redis Client Tests
          case "${{ steps.redis-client-tests.outputs.redis_client_status }}" in
            "success")
              echo "**Redis Client Tests:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
              ;;
            "failure")
              echo "**Redis Client Tests:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "**Redis Client Tests:** ❓ Unknown" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Cache Service Tests
          case "${{ steps.cache-service-tests.outputs.cache_service_status }}" in
            "success")
              echo "**Cache Service Tests:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
              ;;
            "failure")
              echo "**Cache Service Tests:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "**Cache Service Tests:** ❓ Unknown" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Cache Warming Test
          case "${{ steps.cache-warming-test.outputs.cache_warming_status }}" in
            "success")
              echo "**Cache Warming Script:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
              ;;
            "failure")
              echo "**Cache Warming Script:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
              ;;
            "timeout")
              echo "**Cache Warming Script:** ⏰ Timed out (60s limit)" >> $GITHUB_STEP_SUMMARY
              ;;
            "skipped")
              echo "**Cache Warming Script:** ℹ️ Skipped (No credentials)" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "**Cache Warming Script:** ❓ Unknown" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Add warnings for specific issues
          if [ "${{ steps.cache-warming-test.outputs.cache_warming_status }}" = "timeout" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Warnings" >> $GITHUB_STEP_SUMMARY
            echo "- Cache warming script exceeded 60-second timeout limit" >> $GITHUB_STEP_SUMMARY
            echo "- This may indicate slow Redis connectivity or large dataset processing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add Redis connectivity notes
          if [ "${{ steps.check-creds.outputs.has_credentials }}" = "false" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ℹ️ Notes" >> $GITHUB_STEP_SUMMARY
            echo "- Full Redis testing requires the following secrets to be configured:" >> $GITHUB_STEP_SUMMARY
            echo "  - KV_URL" >> $GITHUB_STEP_SUMMARY
            echo "  - KV_REST_API_URL" >> $GITHUB_STEP_SUMMARY
            echo "  - KV_REST_API_TOKEN" >> $GITHUB_STEP_SUMMARY
            echo "  - KV_REST_API_READ_ONLY_TOKEN" >> $GITHUB_STEP_SUMMARY
            echo "  - REDIS_URL" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📦 Archive Test Results and Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: redis-test-results
          path: reports/
          if-no-files-found: warn
          retention-days: 30
      
      - name: 📈 Upload Coverage to Artifacts
        if: always() && steps.check-creds.outputs.has_credentials == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: redis-test-coverage
          path: reports/coverage-*
          if-no-files-found: ignore
          retention-days: 14
      
      # Only fail the workflow if we have credentials and critical tests failed
      - name: 🚫 Check Test Results
        if: always()
        run: |
          SHOULD_FAIL=false
          
          # Fail if Redis client tests failed
          if [ "${{ steps.redis-client-tests.outputs.redis_client_status }}" = "failure" ]; then
            echo "❌ Redis client tests FAILED"
            SHOULD_FAIL=true
          fi
          
          # Fail if Cache service tests failed
          if [ "${{ steps.cache-service-tests.outputs.cache_service_status }}" = "failure" ]; then
            echo "❌ Cache service tests FAILED"
            SHOULD_FAIL=true
          fi
          
          # Only warn for cache warming failures (not critical)
          if [ "${{ steps.cache-warming-test.outputs.cache_warming_status }}" = "failure" ]; then
            echo "⚠️ Cache warming script failed (non-critical)"
          fi
          
          # Don't fail if we don't have credentials
          if [ "${{ steps.check-creds.outputs.has_credentials }}" = "false" ]; then
            echo "ℹ️ Limited testing mode - not failing workflow"
            SHOULD_FAIL=false
          fi
          
          if [ "$SHOULD_FAIL" = "true" ]; then
            echo "💥 Redis testing workflow FAILED - see test results above"
            exit 1
          else
            echo "✅ Redis testing workflow completed successfully"
          fi